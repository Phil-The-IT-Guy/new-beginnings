/*
Project: Philip Ruffin Jr. - Single Page Portfolio
Stack: React + Vite + TailwindCSS
Purpose: Single-page portfolio site with detailed comments for learning & editing.

INSTRUCTIONS
- This single canvas file contains the full project structure as separate code blocks.
- Copy each file into your local project (or use the repo template) and run the commands in README.
- Replace placeholders (name, contact, images) with your real content before publishing.

FILES INCLUDED (copy into a new folder):
- package.json
- vite.config.js
- index.html
- tailwind.config.cjs
- postcss.config.cjs
- src/main.jsx
- src/App.jsx
- src/components/Hero.jsx
- src/components/About.jsx
- src/components/Skills.jsx
- src/components/Experience.jsx
- src/components/Education.jsx
- src/components/Contact.jsx
- src/index.css
- README.md

Below are the full contents for each file. Each code block is heavily commented to explain what's happening.
*/

====================================================
// package.json
====================================================
{
  "name": "philip-ruffin-portfolio",
  "version": "1.0.0",
  "private": true,
  "description": "Single-page portfolio for Philip Ruffin Jr.",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "echo \"No linter configured. Add ESLint if desired.\""
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "tailwindcss": "^3.5.4",
    "vite": "^5.0.0"
  }
}

====================================================
// vite.config.js
====================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// Vite configuration file. We enable the React plugin so JSX and fast refresh work.
export default defineConfig({
  plugins: [react()],
  // Base is left default. If you deploy to GitHub Pages at a sub-path, set base accordingly.
})

====================================================
// index.html
====================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Philip Ruffin Jr. — Higher Education Professional | Tech Consultant | Entrepreneur" />
    <title>Philip Ruffin Jr. — Portfolio</title>
    <!-- favicon (optional) - replace with your file in /public or /src/assets -->
    <link rel="icon" href="/favicon.ico" />
  </head>
  <body>
    <div id="root"></div>
    <!-- Vite will inject the compiled JS here during dev/build -->
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

====================================================
// tailwind.config.cjs
====================================================
module.exports = {
  content: ["./index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      colors: {
        // Hybrid palette: neutral base + deep blue and gold accent
        primary: {
          50: '#f5f7fb',
          100: '#e6eefc',
          500: '#0b3d91', // deep blue accent
        },
        accent: {
          500: '#c59a2e' // gold accent
        }
      },
      fontFamily: {
        // Use system stack for fast load; swap to Google Fonts if desired
        sans: ['Inter', 'ui-sans-serif', 'system-ui', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial']
      }
    }
  },
  plugins: []
}

====================================================
// postcss.config.cjs
====================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

====================================================
// src/main.jsx
====================================================
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './index.css'

/*
Entry point for the React application.
- We import the App component (the single-page site) and the main stylesheet.
- createRoot is the modern React 18+ API for rendering.
*/

const container = document.getElementById('root')
const root = createRoot(container)
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

====================================================
// src/App.jsx
====================================================
import React from 'react'
import Hero from './components/Hero'
import About from './components/About'
import Skills from './components/Skills'
import Experience from './components/Experience'
import Education from './components/Education'
import Contact from './components/Contact'

/*
App.jsx composes the single-page portfolio by arranging sections in order.
- Navigation is a simple sticky header with smooth scrolling anchors.
- Each section is exported as its own component file for clarity.
- Detailed comments inside components explain structure and accessibility choices.
*/

export default function App() {
  return (
    <div className="min-h-screen bg-white text-slate-800 antialiased">
      {/*
      Top navigation bar. Kept compact for a professional look.
      Using Tailwind utility classes for layout, spacing, and responsiveness.
      */}
      <header className="sticky top-0 z-50 bg-white/60 backdrop-blur-md border-b border-gray-200">
        <nav className="max-w-4xl mx-auto px-6 lg:px-8 py-3 flex items-center justify-between">
          <div className="text-sm font-semibold text-slate-900">Philip Ruffin Jr., MBA, CSM</div>
          <div className="space-x-4 text-sm">
            <a href="#about" className="hover:underline">About</a>
            <a href="#skills" className="hover:underline">Skills</a>
            <a href="#experience" className="hover:underline">Experience</a>
            <a href="#education" className="hover:underline">Education</a>
            <a href="#contact" className="hover:underline">Contact</a>
          </div>
        </nav>
      </header>

      <main className="max-w-4xl mx-auto px-6 lg:px-8 py-12 space-y-20">
        <Hero />
        <About />
        <Skills />
        <Experience />
        <Education />
        <Contact />
      </main>

      <footer className="py-8 text-center text-sm text-gray-500">
        © {new Date().getFullYear()} Philip Ruffin Jr. — Built with React + Vite + Tailwind
      </footer>
    </div>
  )
}

====================================================
// src/components/Hero.jsx
====================================================
import React from 'react'

/*
Hero component: first impression area with name, tagline, photo, and contact CTA.
- Uses a two-column layout on large screens, stacked on mobile.
- Includes accessible semantic markup (header, h1, p, img with alt).
- Placeholder image and contact link; replace with your photo and preferred contact method.
*/

export default function Hero() {
  return (
    <section id="hero" className="grid lg:grid-cols-2 gap-8 items-center">
      {/* Left column: text */}
      <div>
        <p className="text-sm uppercase tracking-wide text-slate-600">Higher Education Professional • Tech Consultant • Entrepreneur</p>
        <h1 className="mt-4 text-4xl lg:text-5xl font-semibold leading-tight">Philip Ruffin Jr., MBA, CSM</h1>
        <p className="mt-4 text-lg text-slate-700 max-w-2xl">
          Dynamic business systems professional with 7+ years of experience supporting enterprise student systems, technology risk consulting, and operational leadership. Rapid system mastery and a proven record of maintaining high availability across critical services.
        </p>

        <div className="mt-6 flex flex-wrap gap-3">
          <a href="#contact" className="inline-block px-5 py-3 rounded-md border border-primary-500 text-primary-500 hover:bg-primary-50">Contact</a>
          <a href="/resume.pdf" className="inline-block px-5 py-3 rounded-md bg-accent-500 text-white hover:opacity-95">Download Resume</a>
        </div>

        <ul className="mt-6 text-sm space-y-1 text-slate-600">
          <li><strong>Email:</strong> pruffi791@outlook.com</li>
          <li><strong>Location:</strong> Seattle, WA</li>
          <li><strong>Phone:</strong> 985-381-8608</li>
          <li><strong>LinkedIn:</strong> <a href="https://www.linkedin.com/in/philip-ruffin-jr" className="underline">linkedin.com/in/philip-ruffin-jr</a></li>
        </ul>
      </div>

      {/* Right column: photo placeholder */}
      <div className="flex items-center justify-center">
        {/* Replace src with an imported image or hosted file. Use a professional headshot. */}
        <div className="w-56 h-56 rounded-2xl shadow-lg overflow-hidden flex items-center justify-center bg-gradient-to-br from-slate-100 to-white">
          <img src="https://via.placeholder.com/280x280.png?text=Your+Photo" alt="Philip Ruffin Jr." className="w-full h-full object-cover" />
        </div>
      </div>
    </section>
  )
}

====================================================
// src/components/About.jsx
====================================================
import React from 'react'

/*
About component: condensed professional summary using content from the provided resume.
- Keep paragraphs short for readability.
- Use semantic section with id for navigation.
*/

export default function About() {
  return (
    <section id="about">
      <h2 className="text-2xl font-semibold">About</h2>
      <p className="mt-4 text-slate-700 leading-relaxed">
        Dynamic Business Systems professional with 7+ years of experience supporting diverse user bases with clarity and care. Managed enterprise Student Information Systems for 40,000+ users, and worked as a Technology Risk Consultant with a proven 99.7% uptime record. Experienced across CRM, ERP, GRC, and financial systems including AWS, SAP, Oracle, and Workday.
      </p>
      <p className="mt-3 text-slate-700 leading-relaxed">
        I specialize in rapid system mastery, compliance (FERPA, GDPR, SOX), and leading technical teams to deliver reliable, user-centered solutions. I enjoy turning complex technical details into clear business outcomes and mentoring teams to achieve operational excellence.
      </p>
    </section>
  )
}

====================================================
// src/components/Skills.jsx
====================================================
import React from 'react'

/*
Skills component: grid of core skill categories.
- Each skill shows a short label and optional subtext.
- Keep it easy to add/remove items later.
*/

const SKILLS = [
  { title: 'Student Systems Administration', items: ['SIS', 'Degree Audit', 'Records Management'] },
  { title: 'Registration & Records', items: ['Peak Registration', 'Transcripts', 'Enrollment Verification'] },
  { title: 'ERP & Databases', items: ['Workday', 'Oracle', 'SAP', 'SQL', 'pSQL'] },
  { title: 'Compliance & Governance', items: ['FERPA', 'GDPR', 'SOX', 'Security'] },
  { title: 'Enterprise Technologies', items: ['Active Directory', 'AWS', 'Power BI', 'Power Automate'] },
  { title: 'Leadership', items: ['Team Supervision', 'Project Coordination', 'Mentorship'] },
]

export default function Skills() {
  return (
    <section id="skills">
      <h2 className="text-2xl font-semibold">Core Skills</h2>
      <div className="mt-6 grid sm:grid-cols-2 gap-6">
        {SKILLS.map((s) => (
          <div key={s.title} className="p-4 border rounded-lg">
            <h3 className="font-medium">{s.title}</h3>
            <p className="mt-2 text-sm text-slate-600">{s.items.join(' • ')}</p>
          </div>
        ))}
      </div>
    </section>
  )
}

====================================================
// src/components/Experience.jsx
====================================================
import React from 'react'

/*
Experience component: chronological list of roles using data copied from resume.
- Each role shows title, company, dates, location, and bullet points.
- Keep content concise on the site, but link to a full resume for detailed reading.
*/

const EXPERIENCE = [
  {
    role: 'Internal Controls Contractor',
    company: 'PACCAR',
    location: 'Seattle, WA',
    dates: '08/2025 – Present',
    bullets: [
      'Designed streamlined communications workflows using SharePoint, Power Automate, and Outlook across 15 global divisions.',
      'Improved invoicing and payment processes through data analysis and procedural changes.'
    ]
  },
  {
    role: 'Technology Risk Consultant II',
    company: 'Ernst & Young',
    location: 'Seattle, WA',
    dates: '07/2023 – 08/2024',
    bullets: [
      'Led system testing across Workday, SAP, and AWS for Fortune 500 clients including Amazon and Microsoft.',
      'Supervised and mentored consulting interns and improved implementation efficiency by 28% for $20M+ engagements.'
    ]
  },
  {
    role: 'Information Technology Analyst',
    company: 'Louisiana State University',
    location: 'Baton Rouge, LA',
    dates: '05/2021 – 07/2023',
    bullets: [
      'Managed enterprise SIS supporting 40,000+ users and supervised 40+ student technical staff.',
      'Maintained 99.7% system uptime and developed Power BI dashboards and SQL queries for reporting.'
    ]
  },
  {
    role: 'Asset Manager',
    company: 'Self-Employed',
    location: 'Remote',
    dates: '07/2021 – Present',
    bullets: [
      'Built and manage a $298K diversified property portfolio with 11% above-market returns.'
    ]
  }
]

export default function Experience() {
  return (
    <section id="experience">
      <h2 className="text-2xl font-semibold">Experience</h2>
      <div className="mt-6 space-y-6">
        {EXPERIENCE.map((job) => (
          <article key={job.role} className="p-4 border rounded-lg">
            <header className="flex items-start justify-between">
              <div>
                <h3 className="font-medium">{job.role} — {job.company}</h3>
                <div className="text-sm text-slate-600">{job.location} • {job.dates}</div>
              </div>
            </header>
            <ul className="mt-3 ml-4 list-disc text-slate-700">
              {job.bullets.map((b, i) => <li key={i}>{b}</li>)}
            </ul>
          </article>
        ))}
      </div>
    </section>
  )
}

====================================================
// src/components/Education.jsx
====================================================
import React from 'react'

/*
Education & Certifications component.
- Lists degrees and certifications from the resume.
*/

export default function Education() {
  return (
    <section id="education">
      <h2 className="text-2xl font-semibold">Education & Certifications</h2>
      <div className="mt-4 grid sm:grid-cols-2 gap-4">
        <div className="p-4 border rounded-lg">
          <h3 className="font-medium">MBA — Louisiana State University</h3>
          <div className="text-sm text-slate-600">2023</div>
          <p className="mt-2 text-sm text-slate-700">Emerging Information Technologies Certificate</p>
        </div>

        <div className="p-4 border rounded-lg">
          <h3 className="font-medium">BS, Information Systems & Decision Sciences — LSU</h3>
          <div className="text-sm text-slate-600">2021</div>
          <p className="mt-2 text-sm text-slate-700">Certified Scrum Master (CSM), Lean Six Sigma White Belt, AWS Academy Graduate</p>
        </div>
      </div>
    </section>
  )
}

====================================================
// src/components/Contact.jsx
====================================================
import React, { useState } from 'react'

/*
Contact component: simple contact form (client-side only) and direct contact links.
- The form doesn't send messages server-side. For production, hook it to an email service
  (Formspree, Netlify Forms, or a server endpoint). Comments explain options.
- Form includes basic accessibility attributes and client-side validation.
*/

export default function Contact() {
  const [form, setForm] = useState({ name: '', email: '', message: '' })
  const [status, setStatus] = useState(null)

  function handleChange(e) {
    setForm({ ...form, [e.target.name]: e.target.value })
  }

  function handleSubmit(e) {
    e.preventDefault()
    // Client-side validation example
    if (!form.email || !form.message) {
      setStatus({ type: 'error', message: 'Please provide an email and a message.' })
      return
    }

    // For this static demo we won't actually send the message.
    // Production options:
    // - Use Formspree (https://formspree.io/) and set form action to their endpoint.
    // - Use Netlify/Vercel built-in forms if hosting there.
    // - Implement a server endpoint (Express, serverless function) that sends mail via SES/SendGrid.

    setStatus({ type: 'success', message: 'Message prepared. Replace this handler with a server endpoint to send messages.' })
  }

  return (
    <section id="contact">
      <h2 className="text-2xl font-semibold">Contact</h2>
      <p className="mt-3 text-slate-700">Prefer email? <a className="underline" href="mailto:pruffi791@outlook.com">pruffi791@outlook.com</a></p>

      <form onSubmit={handleSubmit} className="mt-6 grid sm:grid-cols-2 gap-4">
        <div>
          <label className="text-sm">Name</label>
          <input name="name" value={form.name} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-200 p-2" />
        </div>
        <div>
          <label className="text-sm">Email</label>
          <input name="email" type="email" value={form.email} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-200 p-2" required />
        </div>
        <div className="sm:col-span-2">
          <label className="text-sm">Message</label>
          <textarea name="message" value={form.message} onChange={handleChange} rows={5} className="mt-1 block w-full rounded-md border-gray-200 p-2" required />
        </div>

        <div className="sm:col-span-2 flex items-center gap-3">
          <button type="submit" className="px-4 py-2 rounded-md bg-primary-500 text-white">Send Message</button>
          <div className="text-sm text-slate-600">Or email me at <a href="mailto:pruffi791@outlook.com" className="underline">pruffi791@outlook.com</a></div>
        </div>

        {status && (
          <div className={`sm:col-span-2 text-sm ${status.type === 'error' ? 'text-red-600' : 'text-green-600'}`}>{status.message}</div>
        )}
      </form>
    </section>
  )
}

====================================================
// src/index.css
====================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/*
Global styles and small utility tweaks.
- Keep most styling in Tailwind utility classes; add small custom rules here when needed.
*/

html, body, #root {
  height: 100%;
}

/* Smooth scrolling for in-page anchors */
html {
  scroll-behavior: smooth;
}

====================================================
// README.md
====================================================
# Philip Ruffin Jr. — Portfolio (React + Vite + Tailwind)

## Quick start

1. Install dependencies:

```bash
npm install
```

2. Run development server:

```bash
npm run dev
```

3. Build for production:

```bash
npm run build
```

4. Preview the production build locally:

```bash
npm run preview
```

## Deploying to GitHub Pages
- For a single-page React app built with Vite, consider using GitHub Pages via GH Pages action or use a static hosting provider (Netlify, Vercel).
- If publishing to a subpath on GitHub Pages, update `base` in `vite.config.js`.

## Notes on Hosting & Domain
- You mentioned GoDaddy (domain purchase), Cloudflare (DNS & CDN), and Heroku (app hosting). Recommended flow:
  1. Host static site on GitHub Pages, Netlify, or Vercel.
  2. Use Cloudflare for DNS and CDN—add your domain and point the DNS to the hosting provider.
  3. If you add backend features later, consider deploying the server component to Heroku or a serverless platform and proxying via Cloudflare.

## How to customize
- Replace the placeholder photo in `Hero.jsx` with a real headshot.
- Replace text in components with your preferred phrasing. The code is commented heavily to explain what's safe to change.

----------------------------------------------------

/*
END OF PROJECT CONTENT
*/
